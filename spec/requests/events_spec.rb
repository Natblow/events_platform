require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/events", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @current_user = create(:user)
    login_as(@current_user)
  end

  let(:valid_attributes) do
    {
      id: '58',
      time: Time.new(2022, 10, 31),
      description: 'This is an event',
      address: '4500 Grand Boulevard, Montreal',
      user_id: '61',
      user: @current_user
    }
  end

  let(:invalid_attributes) do
    {
      id: '58',
      time: nil,
      description: 'This is an event',
      address: nil,
      user_id: '54',
      user: @current_user
    }
  end

  let(:user_attributes) do
    {
      id: '56',
      name: 'Max',
      email: 'nate@example.com',
      password: 'password',
      password_confirmation: 'password',
      confirmation_token: 'ABCDE1234',
      admin: true
    }
  end

  let(:valid_session) { {} }

  describe "GET /index" do
    it "renders a successful response" do
      event = Event.new(valid_attributes)
      event.user = @current_user
      event.save
      get events_url
      follow_redirect!
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      event = Event.new(valid_attributes)
      event.user = @current_user
      event.save
      get event_url(event)
      follow_redirect!
      expect(response).to be_successful
    end
  end

  describe "GET /myevents" do
    it "renders a successful response" do
      event = Event.new(valid_attributes)
      event.user = @current_user
      event.save
      get event_url(event)
      follow_redirect!
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_event_url
      follow_redirect!
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      event = Event.create! valid_attributes
      get edit_event_url(event)
      follow_redirect!
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Event" do
        expect do
          event = Event.new(valid_attributes)
          event.user = @current_user
          event.save
          post events_url, params: { event: valid_attributes }
        end.to change(Event, :count).by(1)
      end

      it "redirects to the created event" do
        event = Event.new(valid_attributes)
        event.user = @current_user
        event.save
        post events_url, params: { event: valid_attributes }
        expect(response.status).to eq(302)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Event" do
        expect do
          event = Event.new(invalid_attributes)
          event.user = @current_user
          post events_url, params: { event: invalid_attributes }
        end.to change(Event, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        get new_event_url
        follow_redirect!
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          id: '59',
          time: Time.new(2022, 11, 07),
          description: 'This is an event',
          address: '7885 Boulevard Decarie, Montreal',
          user_id: '54',
          user: @current_user
        }
      end

      it "updates the requested event" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(valid_attributes['description']).to eq(:new_attributes['description'])
      end

      it "redirects to the event" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response.status).to eq(302)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: invalid_attributes }
        follow_redirect!
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested event" do
      event = Event.create! valid_attributes
      expect do
        delete event_url(event), params: { event: valid_attributes }
        event.delete
      end.to change(Event, :count).by(-1)
    end

    it "redirects to the events list" do
      event = Event.create! valid_attributes
      delete event_url(event)
      expect(response.status).to eq(302)
    end
  end
end
