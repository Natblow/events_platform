require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/attendees", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Attendee. As you add validations to Attendee, be sure to
  # adjust the attributes here as well.
  # before do
  #   sign_in_as_a_valid_user
  # end
  current_user = User.first_or_create!(id: '1',
                                      email: 'nate@example.com',
                                      password: 'password',
                                      password_confirmation: 'password',
                                      confirmation_token: 'ABCDE1234')

  event = Event.first_or_create!(id: '1',
                                time: Time.new(2022, 10, 31),
                                description: 'This is an event',
                                address: '4500 Grand Boulevard, Montreal',
                                user_id: '56'
                                )

  let(:valid_attributes) do
    {
    id: '1',
    user_id: current_user.id,
    event_id: event.id,
    user: current_user,
    event: event
    }
  end

  let(:invalid_attributes) do
    {
    id: 'a',
    user_id: 'o',
    event_id: 'b'
    }
  end

  let(:event_attributes) do
    {
      id: '1',
      time: Time.new(2022, 10, 31),
      description: 'This is an event',
      address: '4500 Grand Boulevard, Montreal',
      user_id: '56'
    }
  end

  let(:user_attributes) do
    {
      id: '1',
      email: 'nate@example.com',
      password: 'password',
      password_confirmation: 'password',
      confirmation_token: 'ABCDE1234'
    }
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Attendee" do
      expect do
        attendee = Attendee.new(valid_attributes)
        attendee.event = event
        attendee.user = current_user
        attendee.save
        post attendee_event_url(attendee), params: { attendee: valid_attributes }
        end.to change(Attendee, :count).by(1)
      end

      it "redirects to the events page" do
        attendee = Attendee.new(valid_attributes)
        current_user = attendee.user
        event = event
        get event_url(event), params: { event: event_attributes, user: user_attributes }
        expect(response).to be_successful
        # .to redirect_to(events_url(attendee.event,Attendee.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Attendee" do
        expect do
          attendee = Attendee.new(invalid_attributes)
          attendee.event = event
          attendee.user = current_user
          post attendee_event_url(attendee), params: { attendee: invalid_attributes }
        end.to change(Attendee, :count).by(0)
      end

      it "renders a successful response (i.e. to display the events)" do
        attendee = Attendee.new(valid_attributes)
        current_user = attendee.user
        event = event
        get events_url, params: { event: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
  #
  describe "DELETE /destroy" do
    it "destroys the requested attendee" do
      attendee = Attendee.create! valid_attributes
      expect do
        attendee.delete
      end.to change(Attendee, :count).by(-1)
    end

    it "redirects to the attendees list" do
      attendee = Attendee.create! valid_attributes
      delete event_url(attendee)
      expect(response.status).to eq(302)
      # expect(response).to redirect_to(event_url(attendee.event))
    end
  end
end
